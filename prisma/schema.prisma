generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model BaseTag {
    id   String @id @default(cuid())
    slug String @unique
}

model User {
    id        String          @id @default(cuid())
    program   Program?        @relation(fields: [programId], references: [id], onDelete: NoAction)
    programId String          @unique
    info      UserInformation @relation(fields: [infoId], references: [id])
    infoId    String          @unique
}

model UserInformation {
    id                   String  @id @default(cuid())
    age                  Int
    gender               String?
    heightCm             Int
    heightFt             Int
    heightInches         Int
    weightKg             Float
    weightLbs            Float
    fitnessGoal          String?
    daysCountGoal        Int
    currentActivityLevel String?
    User                 User?
}

model Exercise {
    id                   String        @id @default(cuid())
    name                 String
    slug                 String
    description          String
    directions           String
    poster               String?
    gifUrl               String?
    videoUrls            String[]
    alternatives         Exercise[]    @relation("alternatives")
    alternativeExercises Exercise[]    @relation("alternatives")
    tags                 ExerciseTag[]
    category             String

    ProgramDayWorkout ProgramDayWorkout[]
}

model ExerciseTag {
    id   String @id @default(cuid())
    slug String

    exercise   Exercise? @relation(fields: [exerciseId], references: [id])
    exerciseId String?
}

model WorkoutDay {
    id              String            @id @default(cuid())
    slug            String
    name            String
    tags            WorkoutDayTag[]   @relation("TagsToWorkoutDay")
    requiredTags    WorkoutDayTag[]   @relation("RequiredTagsToWorkoutDay")
    WorkoutSplitDay WorkoutSplitDay[]
}

model WorkoutDayTag {
    id                 String      @id @default(cuid())
    slug               String
    workoutDayTag      WorkoutDay? @relation("TagsToWorkoutDay", fields: [workoutDayTagId], references: [id])
    workoutDayTagId    String?
    workoutDayReqTag   WorkoutDay? @relation("RequiredTagsToWorkoutDay", fields: [workoutDayReqTagId], references: [id])
    workoutDayReqTagId String?
}

model WorkoutSplit {
    id        String            @id @default(cuid())
    name      String
    slug      String
    daysCount Int
    days      WorkoutSplitDay[]
}

model WorkoutSplitDay {
    id              String  @id @default(cuid())
    day             Int
    hasMainExercise Boolean @default(true)

    workoutSplit   WorkoutSplit? @relation(fields: [workoutSplitId], references: [id])
    workoutSplitId String?
    workoutDay     WorkoutDay?   @relation(fields: [workoutDayId], references: [id])
    workoutDayId   String?
}

model Program {
    id   String       @id @default(cuid())
    user User?
    days ProgramDay[]
}

model ProgramDay {
    id        String              @id @default(cuid())
    name      String
    day       Int
    program   Program             @relation(fields: [programId], references: [id], onDelete: Cascade)
    programId String
    workouts  ProgramDayWorkout[]
}

model ProgramDayWorkout {
    id    String @id @default(cuid())
    order Int
    reps  Int?
    sets  Int?
    minutes Int?

    exercise     Exercise?   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    exerciseId   String?
    ProgramDay   ProgramDay? @relation(fields: [programDayId], references: [id])
    programDayId String?
}
